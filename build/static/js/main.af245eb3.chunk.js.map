{"version":3,"sources":["config/rem.js","serviceWorker.js","config/asyncComponent.jsx","router/index.js","index.js"],"names":["doc","win","docEl","documentElement","resizeEvt","window","recalc","clientWidth","style","fontSize","addEventListener","document","Boolean","location","hostname","match","asyncComponent","importComponent","_Component","AsyncComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","component","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","_ref","wrap","_context","prev","next","sent","default","setState","stop","apply","arguments","C","react_default","createElement","Component","App","Promise","all","__webpack_require__","e","then","bind","list","RouteConfig","react_router_dom","react_router","path","exact","Route","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kHAAA,SAAWA,EAAKC,GACZ,IAAIC,EAAQF,EAAIG,gBACdC,EAAY,sBAAuBC,OAAS,oBAAsB,SAClEC,EAAS,WACP,IAAIC,EAAcL,EAAMK,YACnBA,IACLL,EAAMM,MAAMC,SAAiBF,EAAc,IAApB,GAA2B,OAEjDP,EAAIU,mBACTT,EAAIS,iBAAiBN,EAAWE,GAAQ,GACxCN,EAAIU,iBAAiB,mBAAoBJ,GAAQ,IAVrD,CAWKK,SAAUN,8FCCKO,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,0JCbS,SAASC,EAAeC,GAsBrC,OAtBsD,SAAAC,GAEpD,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,UAAW,MAJIR,EAFiC,OAAAC,OAAAQ,EAAA,EAAAR,CAAAH,EAAAD,GAAAI,OAAAS,EAAA,EAAAT,CAAAH,EAAA,EAAAa,IAAA,oBAAAC,MAAA,eAAAC,EAAAZ,OAAAa,EAAA,EAAAb,CAAAc,EAAAC,EAAAC,KAAA,SAAAC,IAAA,IAAAC,EAAAX,EAAA,OAAAO,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAWb3B,IAXa,OAAAuB,EAAAE,EAAAG,KAWjChB,EAXiCW,EAW1CM,QAERtB,KAAKuB,SAAS,CAAElB,cAbkC,wBAAAa,EAAAM,SAAAT,EAAAf,SAAA,yBAAAU,EAAAe,MAAAzB,KAAA0B,YAAA,KAAAlB,IAAA,SAAAC,MAAA,WAiBlD,IAAMkB,EAAI3B,KAAKI,MAAMC,UAErB,OAAOsB,EAAIC,EAAAf,EAAAgB,cAACF,EAAM3B,KAAKJ,OAAY,SAnBeD,EAAA,CACzBmC,aCH/B,ICIeA,EDJTC,EAAMvC,EAAe,kBAAMwC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAC3BC,EAAO9C,EAAe,kBAAM0C,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAEbE,mLAEjB,OACEX,EAAAf,EAAAgB,cAACW,EAAA,EAAD,KACEZ,EAAAf,EAAAgB,cAACY,EAAA,EAAD,KACGb,EAAAf,EAAAgB,cAACY,EAAA,EAAD,CAAOC,KAAK,OAAQrC,UAAY0B,IAChCH,EAAAf,EAAAgB,cAACY,EAAA,EAAD,CAAOC,KAAK,QAASrC,UAAYiC,IACjCV,EAAAf,EAAAgB,cAACY,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACtC,UAAY0B,aAPJD,aCC1BA,EAMRc,EALPC,IAASC,OACDlB,EAAAf,EAAAgB,cAACC,EAAD,MACA3C,SAAS4D,eAAe,SHuH1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,KAAK,SAAAe,GACjCA,EAAaC","file":"static/js/main.af245eb3.chunk.js","sourcesContent":["(function (doc, win) {  // 自适应\n    var docEl = doc.documentElement,\n      resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n      recalc = function () {\n        var clientWidth = docEl.clientWidth;\n        if (!clientWidth) return;\n        docEl.style.fontSize = 20 * (clientWidth / 375) + 'px'; // 放下16个字\n      };\n    if (!doc.addEventListener) return;\n    win.addEventListener(resizeEvt, recalc, false);\n    doc.addEventListener('DOMContentLoaded', recalc, false);\n  })(document, window);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\n/**\r\n * 异步加载模块\r\n * @param {*} importComponent \r\n */\r\nexport default function asyncComponent(importComponent) {\r\n  class AsyncComponent extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        component: null\r\n      };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      const { default: component } = await importComponent();\r\n\r\n      this.setState({ component });\r\n    }\r\n\r\n    render() {\r\n      const C = this.state.component;\r\n\r\n      return C ? <C {...this.props} /> : null;\r\n    }\r\n  }\r\n  return AsyncComponent;\r\n}","import React, {Component} from 'react'\r\nimport {HashRouter,Switch, Route} from 'react-router-dom'\r\nimport asyncComponent from '@/config/asyncComponent'\r\nconst App = asyncComponent(() => import(\"@/pages/app/App\"))\r\nconst list = asyncComponent(() => import(\"@/pages/list/list\"))\r\n\r\nexport default class RouteConfig extends Component {\r\n  render () {\r\n    return (\r\n      <HashRouter>\r\n        <Switch>\r\n           <Route path=\"/app\"  component= {App}/>\r\n           <Route path=\"/list\"  component= {list}/>\r\n           <Route path=\"/\" exact component= {App}/>\r\n\r\n        </Switch>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"babel-polyfill\";\nimport * as serviceWorker from './serviceWorker';\nimport './config/rem';\nimport Route from '@/router'\n\nconst render = Component => {\nReactDOM.render(\n        <Component/>,\n        document.getElementById('root')\n)\n}\nrender(Route);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}